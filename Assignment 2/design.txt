Lucas Berezy - 588236
Problem comprehension and assumptions:

From a selection of multiple sources (aid facilities), find the quickest
(``shortest'') path to a single destination (accident site). The conditions for
an appropriate source are that it has:
	The shortest travel time /to/ the destination.
and
	Can supply one or more of requested items for aid.

The item(s) request can be fulfilled by multiple sources.
Travel time between nodes is directional and measured in hours and thus
there exist no negative cycles or weights.

----

Useful resources:
	http://indiageospatialforum.org/pdf/M.S.Saran.pdf (real world example)
	http://gis.stackexchange.com/questions/63073/using-dijkstras-algorithm-for-multiple-source-to-single-destination-shortest-pa

----

Approach:
	For each source, use Dijkstra's algorithm to compute the shortest path from
	the source to the accident location. For N sources and the use of a min-heap
	in the implementation of Dijkstra's algorithm, this would be
	O(VE + V|log|V|). Using a Fibonacci heap would improve this.
	Needs to be run M times (for each item of aid).

Alternative approach 1:
	The Floyd-Warshall algorithm allows the graph to be processed to find
	the shortest paths between all points (pairs). Thus, the shortest path from 
	A to C can be computed as the shortest path from A to B and then from B 
	to C. For each type of aid, iterate through all sources of aid to find the 
	place that can supply the required aid with the shortest travel time to the
	incident. The Floyd-Warshall algorithm runs in O(V^3), and to produce output
	will require iterating over M aid items. Thus, O(V^3 + M) -> O(V^3).
	
Alternative approach 2:
	In order to solve this multiple source shortest path problem, a path tree 
	from one source to a destination could be constructed and
	at each source, this tree only needs to be altered to compute the shortest
	path. This would be more appropriate if there were multiple sources and
	destinations (e.g. choosing the location of a factory such that it was
	optimally positioned near many shipping ports around a map from a set
	of possible build sites)


Alternative approach 1 was chosen due to ease of implementation (no queue) and
allowed for cheaply finding resources rather than having to run an algorithm 
again each time.

----

	information on supplies is stored in a bit-field with the following
	format:
	Boolean values for existance of resource.
	..00000XXXXX
	------------
	..00000BFWDM

	– B: blankets											(16)
	– F: food												(8)
	– W: water												(4)
	– D: digging equipment									(2)
	– M: medicine											(1)
	– X: no supplies or assistance available from this town	(0) (ALL ZERO)

	Each supply has the integer representation as above and specified in #define
	This method allows for testing iteratively testing elements (>>= i &..) and 
	multiple elements at a time.
	This bit representation can fit inside a short int to save space if needed.


Aftermath:

	Yeah, I seriously regret using a bit field to store the relief supply data. It works, but I am not proud of the method used to get there.
