{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"new",
				"new_node"
			],
			[
				"common",
				"common_words_titlecase"
			],
			[
				"common_",
				"common_words_titlecase"
			],
			[
				"default",
				"defaultdict"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Makefile",
			"settings":
			{
				"buffer_size": 586,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dict.h",
			"settings":
			{
				"buffer_size": 135,
				"line_ending": "Unix"
			}
		},
		{
			"file": "dict.c",
			"settings":
			{
				"buffer_size": 1320,
				"line_ending": "Unix"
			}
		},
		{
			"file": "errorcodes.h",
			"settings":
			{
				"buffer_size": 225,
				"line_ending": "Unix"
			}
		},
		{
			"file": "misc.c",
			"settings":
			{
				"buffer_size": 986,
				"line_ending": "Unix"
			}
		},
		{
			"file": "misc.h",
			"settings":
			{
				"buffer_size": 123,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "/*\n	Algorithms and Data Structures - Assignment 1\n	Part 1 - Linked List\n\n	Lucas Berezy, 2013\n*/\n\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\n#include \"list.h\"\n#include \"misc.h\"\n#include \"debug.h\"\n\n\nnode_t* make_node(int key, char *value) {\n	/* \n	Allocates a linked list node and stores the key and value string\n	in the node. Returns a pointer to the new node. By default, next\n	points to NULL.\n	*/\n\n	node_t *node = (node_t*)malloc(sizeof(node_t));\n\n	node->key = key;\n	/* malloc some space for the string and copy it into the node*/\n	node->value = safe_malloc(strlen(value) + 1);\n	strcpy(node->value, value);\n\n	node->next = NULL;\n\n	return node;\n}\n\nnode_t* insert(node_t *list, int key, char *value) {\n	/*\n	Takes the head of a linked list and traverses it until it finds\n	an ordered place to insert a new node of <key:value>\n	\n	*/\n\n	node_t *tmp;\n	/* hold position to left and right of insertion point */\n	node_t *left = NULL, *right = list;\n\n	if (list == NULL) {\n		if (DEBUG) {\n			printf(\"Warning, list == NULL in insert()!\\n\");\n		}\n		return list;\n	}\n\n	/* find insertion point in list */\n	while (right->next && right->key < key) {\n		left = right; /* bring forward left pointer */\n		right = right->next; /* move forward right pointer */\n	}\n\n	/* insert the new node in-between left and right */\n	tmp = make_node(key, value);\n\n\n	if (left == right) {\n		tmp->next = NULL;\n	} else {\n	tmp->next = right;\n	}\n\n		/* allow for insertion at head of list */\n	if (left != NULL) {\n		left->next = tmp;\n	} else {\n		list = tmp; /* tmp is new head of list */\n	}\n	return list; /* need to reassign list out of this scope */\n}\n\nnode_t* search(node_t *list, int key) {\n	/*\n	Finds the first node that matches 'key' and returns a pointer to\n	the matching node.\n	*/\n	if (list == NULL) {\n		if (DEBUG) {\n			printf(\"Warning, list == NULL in insert()!\\n\");\n		}\n		return list;\n	}\n\n	while(list->next && list->key != key) {\n		list = list->next;\n	}\n	return list;\n}\n\nnode_t* delete(node_t *list, int key) {\n	/*\n	Finds the first node that matches 'key' and unlinks it from the list.\n	Returns a pointer to the unlinked node such that it can be freed. Returns\n	NULL if there are no matches (not guaranteed, only the value of node->next).\n	*/\n\n	node_t *prev = list;\n\n	while(list->next && list->key != key) {\n		prev = list;\n		list = list->next;\n	}\n\n	return prev;\n}\n\nvoid print_list(node_t *list) {\n	while(list){\n		printf(\"%d %s\\n\", list->key, list->value);\n		list = list->next;\n	}\n}\n",
			"file": "list.c",
			"file_size": 2455,
			"file_write_time": 130219582440000000,
			"settings":
			{
				"buffer_size": 2457,
				"line_ending": "Unix"
			}
		},
		{
			"file": "list.h",
			"settings":
			{
				"buffer_size": 318,
				"line_ending": "Unix"
			}
		},
		{
			"file": "debug.h",
			"settings":
			{
				"buffer_size": 49,
				"line_ending": "Unix",
				"name": "#ifdef DEBUG"
			}
		},
		{
			"file": "skiplist.h",
			"settings":
			{
				"buffer_size": 476,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/GCC_C.sublime-build",
	"command_palette":
	{
		"height": 347.0,
		"selected_items":
		[
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"theme",
				"SublimeREPL: Petite Chez Scheme"
			],
			[
				"ssc",
				"Set Syntax: C"
			],
			[
				"ssmake",
				"Set Syntax: Makefile"
			],
			[
				"pyth",
				"SublimeREPL: Python"
			],
			[
				"python",
				"SublimeREPL: Python"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"sspy",
				"Set Syntax: Python"
			],
			[
				"sspyth",
				"Set Syntax: Python"
			],
			[
				"ssjava",
				"Set Syntax: Java"
			],
			[
				"ssja",
				"Set Syntax: Java"
			],
			[
				"packa",
				"Package Control: Upgrade Package"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"pep",
				"User: Python PEP8 Autoformat"
			],
			[
				"pytho",
				"SublimeREPL: Python"
			],
			[
				"",
				"Package Control: Grab CA Certs"
			],
			[
				"side",
				"View: Toggle Side Bar"
			],
			[
				"pep8",
				"User: Python PEP8 Autoformat"
			],
			[
				"intel",
				"SublimeCodeIntel: Reset"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pyt",
				"SublimeREPL: Python"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 125.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read())"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/data_reading.c",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/dict.c",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/skiplist.c",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/misc.h",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/Makefile",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/list.h",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/list.c",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/misc.c",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/dict2.h",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/dict2.c",
		"/Users/lucas/Library/Application Support/Sublime Text 3/Packages/User/Split_Line.py",
		"/Users/lucas/Library/Application Support/Sublime Text 3/Packages/User/Default (OSX).sublime-keymap",
		"/Users/lucas/Library/Application Support/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/skiplist.h",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/dict.h",
		"/Users/lucas/Library/Application Support/Sublime Text 3/Packages/User/GCC_C.sublime-build",
		"/Users/lucas/Documents/Code/C/Algorithms/Assignment 1/makefile.GNUmakefile",
		"/Users/lucas/Documents/Code/C/Algorithms/linkedlist.c",
		"/Users/lucas/Documents/Code/Python/Language & Computation/Project 1/test.txt",
		"/Users/lucas/Documents/Code/Java/HelloWorld.java",
		"/Users/lucas/Documents/Code/C/Algorithms/power_set.c",
		"/Users/lucas/Documents/Code/C/linkedlist.c",
		"/Users/lucas/Documents/Code/C/mandelbrot.c",
		"/Users/lucas/Documents/Code/Python/Language & Computation/workshop2_ex3.py",
		"/Users/lucas/Documents/Code/Python/Language & Computation/workshop2_ex2.py",
		"/Users/lucas/Documents/Code/Python/Language & Computation/workshop2.py",
		"/Users/lucas/Library/Application Support/Sublime Text 2/Packages/User/Preferences.sublime-settings",
		"/Users/lucas/Documents/Code/Python/Language & Computation/Project 1/project1.sublime-project"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"-Wall",
			"gcc",
			"printf(\"%d\\n\",level(MAXLEVEL, PROB));",
			"PROB",
			"print",
			"itertools.izip",
			"...",
			"\n..."
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"zip"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 6,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Makefile",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 586,
						"regions":
						{
						},
						"selection":
						[
							[
								183,
								183
							]
						],
						"settings":
						{
							"syntax": "Packages/Makefile/Makefile.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "dict.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 135,
						"regions":
						{
						},
						"selection":
						[
							[
								135,
								135
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "dict.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1320,
						"regions":
						{
						},
						"selection":
						[
							[
								1124,
								1124
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 86.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "errorcodes.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 225,
						"regions":
						{
						},
						"selection":
						[
							[
								225,
								225
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "misc.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 986,
						"regions":
						{
						},
						"selection":
						[
							[
								175,
								175
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "misc.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 123,
						"regions":
						{
						},
						"selection":
						[
							[
								123,
								123
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "list.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2457,
						"regions":
						{
						},
						"selection":
						[
							[
								840,
								840
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 445.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "list.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 318,
						"regions":
						{
						},
						"selection":
						[
							[
								310,
								310
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "debug.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 49,
						"regions":
						{
						},
						"selection":
						[
							[
								49,
								49
							]
						],
						"settings":
						{
							"auto_name": "#ifdef DEBUG",
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "skiplist.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 476,
						"regions":
						{
						},
						"selection":
						[
							[
								70,
								70
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"project": "Assignment 1.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
